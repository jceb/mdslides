#!/usr/bin/env bash
set -euo pipefail
# set -x

VERSION='0.5.2'

urlencode() {
	# Source: https://gist.github.com/cdown/1163649
	local LC_ALL=C # support unicode = loop bytes, not characters
	local LC_COLLATE=C
	local l=${#1}
	for ((i = 0; i < l; i++)); do
		local c=${1:i:1}
		case "$c" in
		[a-zA-Z0-9.~_-]) printf '%s' "$c" ;;
		' ') printf + ;;
		*) printf '%%%.2X' "'$c" ;;
		esac
	done
}

compute_url() {
	local SERVICE="$1"
	local SLIDES="$2"
	echo "${SERVICE}/?slides=$(urlencode "${SLIDES}")"
}

run_webserver() {
	local PORT="$1"
	local ROOT_DIRECTORY="$2"
	local SLIDES="$3"
	local SERVER_CMD

	SERVER_CMD="$(mktemp --tmpdir slidedown_http_server_XXXX.py)"
	trap "rm -f '${SERVER_CMD}'" 1 2 3 15
	cat >"${SERVER_CMD}" <<END
#!/usr/bin/env python3
# It's python3 -m http.server PORT for a CORS world
from http.server import HTTPServer, SimpleHTTPRequestHandler
import sys

class CORSRequestHandler(SimpleHTTPRequestHandler):
    def end_headers(self):
        self.send_header('Access-Control-Allow-Origin', '*')
        self.send_header('Access-Control-Allow-Methods', '*')
        self.send_header('Access-Control-Allow-Headers', '*')
        self.send_header('Cache-Control', 'no-store, no-cache, must-revalidate')
        return super(CORSRequestHandler, self).end_headers()

    def do_OPTIONS(self):
        self.send_response(200)
        self.end_headers()

    def translate_path(self, path):
        return super().translate_path(path.lstrip("/slides"))

host = sys.argv[1] if len(sys.argv) > 2 else '0.0.0.0'
port = int(sys.argv[len(sys.argv)-1]) if len(sys.argv) > 1 else 8080

print("Listening on {}:{}".format(host, port))
httpd = HTTPServer((host, port), CORSRequestHandler)
try:
    httpd.serve_forever()
except KeyboardInterrupt:
    print("Stopping http server")
    sys.exit(0)
END

	cd "${ROOT_DIRECTORY}"
	python3 "${SERVER_CMD}" "localhost" "${PORT}"
}

export_pdf() {
	local DOCKER="$1"
	local URL="$2"
	local RESOLUTION="$3"
	local FILE="$4"
	if [[ -z "${DOCKER}" ]]; then
		decktape "${URL}" -s "${RESOLUTION}" "${FILE}"
	else
		docker run --net=host -u "$(id -u)" --rm -t -v "${PWD}:/slides" "astefanutti/decktape" "${URL}" -s "${RESOLUTION}" "${FILE}"
	fi
}

open_url() {
	local NO_OPEN="$1"
	local URL="$2"

	if [[ -n "${NO_OPEN}" ]]; then
		return
	fi

	local COMMAND
	if which xdg-open &>/dev/null; then
		COMMAND=xdg-open
	elif which open-cli &>/dev/null; then
		COMMAND=open-cli
	elif which open-cli &>/dev/null; then
		COMMAND=open
	else
		echo "ERROR: no command found to open URLs with. Supported: xdg-open, open-cli, open" 1>&2
		return 1
	fi
	"${COMMAND}" "${URL}"
}

main() {
	local SCRIPT_NAME="${1}"
	shift

	local TEMP
	TEMP=$(getopt -o 'hednuvp:i:r:' --long 'help,export,docker,no-open,update,version,port:,image:,resolution:' -n "$(basename "${SCRIPT_NAME}")" -- "$@")

	# Note the quotes around "$TEMP": they are essential!
	eval set -- "$TEMP"
	unset TEMP

	while true; do
		case "$1" in
		'-h' | '--help')
			echo "USAGE: $(basename "${0}") [OPTIONS] [FILENAME]"
			echo "OPTIONS (option can also be set via environment variable):"
			echo -e '  -h|--help\tPrint this usage information'
			echo -e '  -e|--export\tExport slideshow as PDF - if exporting from a local docker instance repeat the options that were used to start the service when using this option (env EXPORT)'
			echo -e '  -r|--resolution\tExport resolution (default: 2560x144, env RESOLUTION)'
			echo -e '  -d|--docker\tRun slideshow service locally via docker (default: is to run a local http server via Python3 and connect to an online service, env DOCKER)'
			echo -e '  -i|--image\tUse docker image (default: jceb/slidesdown:latest, env IMAGE)'
			echo -e '  -p|--port\tOpen slideshow service at port (default: 3000, env PORT)'
			echo -e '  -s|--service\tConnect to online service (default: slidesdown.github.io, env SERVICE)'
			echo -e '  -n|--no-open\tDo not open browser at the start (env NO_OPEN)'
			echo -e '  -u|--update\tUpdate slidesdown script (env UPDATE)'
			echo -e '  -v|--version\tPrint script version'
			echo "FILENAME: default SLIDES.md"
			echo
			echo "Attention: only the docker service provides hot-reloading when changes are made to the slideshow!"
			echo
			echo "Website: https://github.com/slidesdown/slidesdown"
			exit
			;;
		'-d' | '--docker')
			local DOCKER=1
			shift
			continue
			;;
		'-e' | '--export')
			local EXPORT=1
			shift
			continue
			;;
		'-p' | '--port')
			local PORT="${2}"
			shift 2
			continue
			;;
		'-i' | '--image')
			local IMAGE="${2}"
			shift 2
			continue
			;;
		'-r' | '--resolution')
			local RESOLUTION="${2}"
			shift 2
			continue
			;;
		'-s' | '--service')
			local SERVICE="${2}"
			shift 2
			continue
			;;
		'-n' | '--no-open')
			local NO_OPEN=1
			shift
			continue
			;;
		'-u' | '--update')
			local UPDATE=1
			shift
			continue
			;;
		'-v' | '--version')
			echo "${VERSION}"
			exit
			;;
		'--')
			shift
			break
			;;
		*)
			echo 'Internal error!' >&2
			exit 1
			;;
		esac
	done

	local DOCKER="${DOCKER:-}"
	local EXPORT="${EXPORT:-}"
	local UPDATE="${UPDATE:-}"
	local NO_OPEN="${NO_OPEN:-}"
	local PORT="${PORT:-3000}"
	local IMAGE="${IMAGE:-jceb/slidesdown:${VERSION}}"
	local SERVICE="${SERVICE:-https://slidesdown.github.io}"
	local RESOLUTION="${RESOLUTION:-2560x1440}"

	local ROOT_DIRECTORY
	ROOT_DIRECTORY="$(readlink -f "$(dirname "${1:-SLIDES.md}")")/"
	local SLIDES
	SLIDES="$(basename "${1:-SLIDES.md}")"
	local URL
	if [[ -n "${UPDATE}" ]]; then
		echo "Updating ${SCRIPT_NAME}"
		SCRIPT_TEMP="$(mktemp --tmpdir "$(basename "${SCRIPT_NAME}")_XXXX")"
		trap "rm -f '${SCRIPT_TEMP}'" 0 1 2 3 15
		curl -sfLo "${SCRIPT_TEMP}" "https://raw.githubusercontent.com/jceb/slidesdown/main/slidesdown"
		trap "cat '${SCRIPT_TEMP}' > '${SCRIPT_NAME}'; rm -f '${SCRIPT_TEMP}'" 0
		echo "Update complete"
		return 0
	fi
	if [[ -n "${DOCKER}" ]]; then
		URL="$(compute_url "http://localhost:${PORT}" "slides/${SLIDES}")"
	else
		URL="$(compute_url "${SERVICE}" "http://localhost:${PORT}/slides/${SLIDES}")"
	fi
	if [[ -z "${EXPORT}" ]]; then
		if [[ -n "${DOCKER}" ]]; then
			local CONTAINER_SLIDES_DIRECTORY="/srv/slides"
			local CONTAINER_SLIDES_PORT="8080"
			local CONTAINER_ID="$(docker run -d --rm -v "${ROOT_DIRECTORY}:${CONTAINER_SLIDES_DIRECTORY}" -p "${PORT}:${CONTAINER_SLIDES_PORT}" "${IMAGE}" "${SLIDES}")"
			trap "docker kill '${CONTAINER_ID}' >/dev/null" 1 2 3 15
			echo "Waiting for container to start.."
			sleep 2
			echo "Slideshow URL: ${URL}"
			open_url "${NO_OPEN}" "${URL}" || true
			docker attach --sig-proxy=false "${CONTAINER_ID}"
		else
			run_webserver "${PORT}" "${ROOT_DIRECTORY}" "${SLIDES}" &
			echo "Slideshow URL: ${URL}" || true
			open_url "${NO_OPEN}" "${URL}"
			wait %1
		fi
	else
		export_pdf "${DOCKER}" "${URL}" "${RESOLUTION}" "${SLIDES%%.*}.pdf"
	fi
}

main "$(readlink -f "$0")" "${@}"
